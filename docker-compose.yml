services:
  proxy:
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
      - ${ADMIN_PORT}:81
    environment:
      DB_MYSQL_HOST: db
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: ${DB_USER}
      DB_MYSQL_PASSWORD: ${DB_PASSWORD}
      DB_MYSQL_NAME: proxy
      DISABLE_IPV6: ${DISABLE_IPV6:-true}
    volumes:
      - data_proxy:/data
      - data_letsencrypt:/etc/letsencrypt
    healthcheck:
      test: ["CMD", "curl", "-f", "-s", "http://localhost:81/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - io

  db:
    image: jc21/mariadb-aria:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME:-npm}
      MYSQL_USER: ${DB_USER:-npm}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - data_db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - io

  backup:
    image: 'alpine:latest'
    restart: unless-stopped
    command: >
      sh -c "
      apk add --no-cache tar gzip &&
      while true; do
        echo \"Starting backup at $$(date)\"
        tar -czf /backup/proxy_data_$$(date +%Y%m%d_%H%M%S).tar.gz -C /data . &&
        tar -czf /backup/proxy_letsencrypt_$$(date +%Y%m%d_%H%M%S).tar.gz -C /letsencrypt . &&
        tar -czf /backup/proxy_db_$$(date +%Y%m%d_%H%M%S).tar.gz -C /db . &&
        echo \"Backup completed at $$(date)\"
        find /backup -name '*.tar.gz' -mtime +${BACKUP_RETENTION_DAYS:-7} -delete &&
        echo \"Old backups cleaned up\"
        sleep ${BACKUP_INTERVAL:-86400}
      done
      "
    volumes:
      - data_proxy:/data:ro
      - data_letsencrypt:/letsencrypt:ro
      - data_db:/db:ro
      - data_backup:/backup
    depends_on:
      db:
        condition: service_healthy
    networks:
      - io
    profiles:
      - production

volumes:
  data_proxy:
    name: ${DATA_PROXY}
    external: true

  data_letsencrypt:
    name: ${DATA_LETSENCRYPT}
    external: true

  data_db:
    name: ${DATA_DB}
    external: true

  data_backup:
    name: ${DATA_BACKUP}
    external: true

# Execute:
# docker network create --driver=bridge --subnet=172.30.130.0/24 --gateway=172.30.130.1 proxy

networks:
  io:
    name: ${COMPOSE_PROJECT_NAME}
    external: true
